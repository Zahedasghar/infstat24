{
  "hash": "2a159dc48953f1ed401dd60532b62c23",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab on data analytics with pakwheels data\"\nauthor: \"Zahid Asghar\"\nfooter: \"[pakwheels](https://zahidasghar.com/dataanalytics/pakwheels)\"\nformat: html\n---\n\n\n\n\n## Introduction\n\n Statistics main focus is turning information into\nknowledge and the very first step is to summarize and describe the raw\ninformation - the data. In this lab we explore `pakwheels` data scrapped from Pakwheels website. Purpose of this lab is to learn analytics by doing. We will generate simple graphical and numerical summaries of data on these used car sales data and explore its. As this is a large\ndata set, along the way you'll also learn the indispensable skills of data\nprocessing and subsetting.\n\n## Getting started\n\n### Load packages\n\nIn this lab we will explore the data using the `dplyr` package and visualize it\nusing the `ggplot2` package for data visualization. Or other way round is to use `tidyverse` package which contains many useful packages in itself.\nLet's load the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(statsr)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\n### Data\n\nThe [Pakwheels data](http://www.pakwheels.com/)\nscrapped from website we will be working with in this lab. [Data can be downloaded](https://github.com/Zahedasghar/data_analytics/blob/main/pakwheels.rds). This is R data which you can directly read in R.\n\nWe begin by loading the `pakwheels` data frame. Type the following in your console\nto load the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npakwheels <- readRDS(\"D:/RepTemplates/infstat23/slides/pakwheels.rds\")\n```\n:::\n\n\nThe data frame containing 56186 cars that shows up in your\nworkspace is a *data matrix*, with each row representing an *observation* and each\ncolumn representing a *variable*. R calls this data format a **data frame**, which is\na term that will be used throughout the labs.\n\nTo view the names of the variables, type the command and `clean_names` using `janitor` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(pakwheels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Ad No\"           \"Name\"            \"Price\"           \"Model Year\"     \n [5] \"Location\"        \"Mileage\"         \"Registered City\" \"Engine Type\"    \n [9] \"Engine Capacity\" \"Transmission\"    \"Color\"           \"Assembly\"       \n[13] \"Body Type\"       \"Features\"        \"Last Updated\"    \"URL\"            \n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code}\npakwheels <- pakwheels |> clean_names()\n\npakwheels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56,186 × 16\n     ad_no name    price model_year location mileage registered_city engine_type\n     <dbl> <chr>   <chr>      <dbl> <chr>      <dbl> <chr>           <chr>      \n 1 4096758 Toyota… 2385…       2017 G- 8, I…    9869 Un-Registered   Petrol     \n 2 4168305 Toyota… 1110…       2019 Peshawa…   11111 Islamabad       Petrol     \n 3 4168298 Suzuki… 1530…       2019 Akora K…   17500 Un-Registered   Petrol     \n 4 4168307 Suzuki… 1650…       2019 Abdulla…    9600 Lahore          Petrol     \n 5 4168306 Toyota… 1435…       2010 9th Ave…  120000 Islamabad       Petrol     \n 6 4168303 Honda … 3850…       2017 Peshawa…   22000 Islamabad       Petrol     \n 7 4168304 Suzuki… 1440…       2017 Gulberg…   31000 Lahore          Petrol     \n 8 4168309 Mitsub… 1425…       2012 Askari-…  101000 Lahore          Petrol     \n 9 4168310 Toyota… 2650…       1998 Sargodh…  110000 Rawalpindi      Diesel     \n10 4168311 Honda … 3350…       2017 Air Ave…   60000 Lahore          Petrol     \n# ℹ 56,176 more rows\n# ℹ 8 more variables: engine_capacity <chr>, transmission <chr>, color <chr>,\n#   assembly <chr>, body_type <chr>, features <chr>, last_updated <chr>,\n#   url <chr>\n```\n\n\n:::\n:::\n\n\nThis returns the names of the variables in this data frame. The **codebook**\n  (description of the variables) is included below. \n\n- `ad_no`, : Advertisement Number\n- `name` : Name of a company\n- `price`: Price in PKR\n- `model_year`: Model year\n+ `location`:           Location of a car\n+ `mileage`:      Number of KM car has driven\n+ `registration_city`:        City of registration\n+ `engine_type`:            Petrol or Diesel or other\n+ `engine_capacity`:        How many cc engine\n+ `transmission`:    Manual or Automatic\n+ `color`:      color of a car\n+ `assembly`: Imported or local\n+ `body_type`:      Type of body (Sedan/SUV/...)\n+ `features`:                   Features\n+ `last_updated`:       Date of last update\n+ `url`:       URL\n\n\nA very useful function for taking a quick peek at your data frame, and viewing\nits dimensions and data types is  `glimpse`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pakwheels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 56,186\nColumns: 16\n$ ad_no           <dbl> 4096758, 4168305, 4168298, 4168307, 4168306, 4168303, …\n$ name            <chr> \"Toyota Vitz F 1.0 2017\", \"Toyota Corolla GLi Automati…\n$ price           <chr> \"2385000.0\", \"111000.00000000001\", \"1530000.0\", \"16500…\n$ model_year      <dbl> 2017, 2019, 2019, 2019, 2010, 2017, 2017, 2012, 1998, …\n$ location        <chr> \"G- 8, Islamabad Islamabad\", \"Peshawar KPK\", \"Akora Kh…\n$ mileage         <dbl> 9869, 11111, 17500, 9600, 120000, 22000, 31000, 101000…\n$ registered_city <chr> \"Un-Registered\", \"Islamabad\", \"Un-Registered\", \"Lahore…\n$ engine_type     <chr> \"Petrol\", \"Petrol\", \"Petrol\", \"Petrol\", \"Petrol\", \"Pet…\n$ engine_capacity <chr> \"1000 cc\", \"1300 cc\", \"660 cc\", \"660 cc\", \"1300 cc\", \"…\n$ transmission    <chr> \"Automatic\", \"Automatic\", \"Automatic\", \"Manual\", \"Manu…\n$ color           <chr> \"Silver\", \"White\", \"White\", \"White\", \"Black\", \"Black\",…\n$ assembly        <chr> \"Imported\", \"Local\", \"Local\", \"Local\", \"Local\", \"Local…\n$ body_type       <chr> \"Hatchback\", \"Sedan\", \"Hatchback\", \"Hatchback\", \"Sedan…\n$ features        <chr> \"ABS, AM/FM Radio, Air Bags, Air Conditioning, CD Play…\n$ last_updated    <chr> \"Jul 11, 2020\", \"Jul 12, 2020\", \"Jul 12, 2020\", \"Jul 1…\n$ url             <chr> \"https://www.pakwheels.com/used-cars/toyota-vitz-2017-…\n```\n\n\n:::\n:::\n\n\nThe `pakwheels` data frame has lot of information. But let us have little cleaning as price is numeric variable but her its a character, url is not of any usage for us in this data so can be dropped and similar we need company names (first word from variable `name`).\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pakwheels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 56,186\nColumns: 18\n$ ad_no           <dbl> 4096758, 4168305, 4168298, 4168307, 4168306, 4168303, …\n$ name            <chr> \"Toyota Vitz F 1.0 2017\", \"Toyota Corolla GLi Automati…\n$ price           <dbl> 2385000, 111000, 1530000, 1650000, 1435000, 3850000, 1…\n$ model_year      <dbl> 2017, 2019, 2019, 2019, 2010, 2017, 2017, 2012, 1998, …\n$ location        <chr> \"G- 8, Islamabad Islamabad\", \"Peshawar KPK\", \"Akora Kh…\n$ mileage         <dbl> 9869, 11111, 17500, 9600, 120000, 22000, 31000, 101000…\n$ registered_city <chr> \"Un-Registered\", \"Islamabad\", \"Un-Registered\", \"Lahore…\n$ engine_type     <chr> \"Petrol\", \"Petrol\", \"Petrol\", \"Petrol\", \"Petrol\", \"Pet…\n$ engine_capacity <chr> \"1000 cc\", \"1300 cc\", \"660 cc\", \"660 cc\", \"1300 cc\", \"…\n$ transmission    <chr> \"Automatic\", \"Automatic\", \"Automatic\", \"Manual\", \"Manu…\n$ color           <chr> \"Silver\", \"White\", \"White\", \"White\", \"Black\", \"Black\",…\n$ assembly        <chr> \"Imported\", \"Local\", \"Local\", \"Local\", \"Local\", \"Local…\n$ body_type       <chr> \"Hatchback\", \"Sedan\", \"Hatchback\", \"Hatchback\", \"Sedan…\n$ features        <chr> \"ABS, AM/FM Radio, Air Bags, Air Conditioning, CD Play…\n$ last_updated    <chr> \"Jul 11, 2020\", \"Jul 12, 2020\", \"Jul 12, 2020\", \"Jul 1…\n$ url             <chr> \"https://www.pakwheels.com/used-cars/toyota-vitz-2017-…\n$ hp              <dbl> 1000, 1300, 660, 660, 1300, 1500, 1000, 1000, 3000, 18…\n$ company         <chr> \"Toyota\", \"Toyota\", \"Suzuki\", \"Suzuki\", \"Toyota\", \"Hon…\n```\n\n\n:::\n:::\n\n\nLet's think about\nsome questions we might want to answer with these data:\n\n- Can we answer a question: what is the best car? \n**No we cant answer this question**\n- But we can answer which car is used the most. So find which car is sold the most.\n- Or we might want to determine which of the three major companies has maximum cars.\n\n### Seven verbs\n\nThe `dplyr` package offers seven verbs (functions) for basic data\nmanipulation:\n\n- `filter()`\n- `arrange()`\n- `select()`\n- `distinct()`\n- `mutate()`\n- `summarise()`\n- `sample_n()`\n\nWe will use some of these functions in this lab, and learn about others in a\nfuture lab.\n\n\n## Analysis\n\n### Question 1\n\nHow many observations are left in the data after droping missing observations from data?\n\n\n::: {.cell}\n\n:::\n\n\n### Question 2\n\n  -  Take the `pakwheels` data frame, drop missing observations and use `filter` for cars manufactured by **Suzuki** company and save as a new frame called `suzuki_cars`.\n\n::: {.cell}\n\n:::\n\n\n### Question 3\n\nCalculate mean and standard deviation of price of **Suzuki** company vehicles.\n\n\n::: {.cell}\n\n:::\n\n\nNote that in the `summarise` function we created a list of two elements. The\nnames of these elements are user defined, like `mean_dd`, `sd_dd`, `n`, and\nyou could customize these names as you like (just don't use spaces in your\nnames). Calculating these summary statistics also require that you know the\nfunction calls. Note that `n()` reports the sample size.\n\n\n**Summary statistics: ** Some useful function calls for summary statistics for a\nsingle numerical variable are as follows:\n\n- `mean`\n- `median`\n- `sd`\n- `var`\n- `IQR`\n- `range`\n- `min`\n- `max`\n\nWe can also filter based on multiple criteria. Suppose we are interested in\ncars headed to by Toyota and are between 1000 and 1300 cc engine_capacity, save it as toyota_cars_small.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npakwheels |> na.omit() |> \n  filter(company==\"Toyota\", hp>999 &hp<1300)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,579 × 18\n     ad_no name    price model_year location mileage registered_city engine_type\n     <dbl> <chr>   <dbl>      <dbl> <chr>      <dbl> <chr>           <chr>      \n 1 4096758 Toyot… 2.39e6       2017 G- 8, I…    9869 Un-Registered   Petrol     \n 2 4099087 Toyot… 9.65e5       2001 Johar T…  135000 Karachi         Petrol     \n 3 4168130 Toyot… 2.35e6       2017 Lahore …   35000 Un-Registered   Petrol     \n 4 4168233 Toyot… 1.65e6       2014 Bahadur…   80000 Karachi         Petrol     \n 5 4168247 Toyot… 1.28e6       2006 Gulshan…  105000 Karachi         Petrol     \n 6 4167547 Toyot… 1.25e6       2007 I- 8, I…  177000 Islamabad       Petrol     \n 7 4153127 Toyot… 2.47e6       2017 Pak Ara…   66198 Un-Registered   Petrol     \n 8 4160338 Toyot… 2.05e6       2016 Pak Ara…   16667 Un-Registered   Petrol     \n 9 4163093 Toyot… 2.29e6       2016 Pak Ara…   53122 Un-Registered   Petrol     \n10 4089955 Toyot… 2.28e6       2016 Pak Ara…   75546 Un-Registered   Petrol     \n# ℹ 2,569 more rows\n# ℹ 10 more variables: engine_capacity <chr>, transmission <chr>, color <chr>,\n#   assembly <chr>, body_type <chr>, features <chr>, last_updated <chr>,\n#   url <chr>, hp <dbl>, company <chr>\n```\n\n\n:::\n:::\n\n\n\n### Question 4 \n\nHow many  cars of white color having engine_capacity between 1000 and 1300 cc. \n\n\n::: {.cell}\n\n:::\n\n\n\n### Question 5\n\nCalculate mean, median, sd, min, max and IQR from `toyota_car_small` using summarise function.\n\n\n::: {.cell}\n\n:::\n\n\n\n### Question 6\n\nRepeat question 5 for all cars having engine capacity between 1200 and 1300 cc.\n\n::: {.cell}\n\n:::\n\n\n\n\n\n### Question 7\n \nHow many total vehicles by each company.\n\n\n::: {.cell}\n\n:::\n\n\n\n### Question 8\n\nCalculate a new variable `price_mill` using `mutate` in `pakwheels` data frame. \n\n\n::: {.cell}\n\n:::\n\n\n\n### Question 9\n\nHow many cars are  under 1800 and above 1800 are unregistered, respectively? What proportion of cars under 1800 cc and above 1800 cc are unregistered ?\n\n\n::: {.cell}\n\n:::\n\n\n### Question 10\n\nWhat proporiton of cars manufactured locally and imported unregistered? \n\n::: {.cell}\n\n:::\n\n\n### Question 11 \n\nWhat is the most old car displayed for sale i-e `model_year` and also count cars by `model_year`. \n\n\n::: {.cell}\n\n:::\n\n\n\n### Question 12 \n\nUse `arrange` and list number of cars by color in ascedning and descending order. Which color car is sold the most, second most and third most. \n\n\n::: {.cell}\n\n:::\n\n\n\n### Question 13 \n\nWhich company car having engine_capacity 1300 cc costs the most.\n\n\n::: {.cell}\n\n:::\n\n\n How many cars with model_year 2017 with 1300 cc engine capacity are listed for sale?\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Lab1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}